package gob.servir.workflow.bean;
import gob.servir.workflow.dao.RolDao;
import gob.servir.workflow.model.Rol;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;


@ContextConfiguration("/test-context.xml")
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class RolDaoTest {
	@Autowired
	private RolDao rolDao;
	List <Long> roles = new ArrayList<Long>();
	
	//inicializar valores de los roles
	@Before
	public void prepareData() {
		roles.clear();
		Rol rol1 = new Rol();
		rol1.setIdRol((long) 0);
		rol1.setNombre("Demo1");
		rolDao.save(rol1);
		roles.add(rol1.getIdRol());
		Rol rol2 = new Rol();
		rol2.setIdRol((long) 1);
		rol2.setNombre("Demo1");
		rolDao.save(rol2);
		roles.add(rol2.getIdRol());
	}
	
	@Test
	public void deberiaGuardarRol(){
//		Arrange - Preparar
		Rol rol = new Rol();
		rol.setIdRol((long) 5);
		rol.setNombre("Administrador");
		rol.setEstado("E");
//		Act - Actuar
		rolDao.save(rol);
		Long id = rol.getIdRol();
//		Assert - Afirmar
		Assert.assertNotNull(id);
	}
	
	@Test
	public void deberiaModificarRol(){
//		Arrange - Preparar	
		Rol rol = rolDao.find((long) 0);
		rol.setNombre("Administrador");
		rol.setEstado("E");
//		Act - Actuar
		rolDao.save(rol);
//		Assert - Afirmar
		Assert.assertFalse("el nombre deberia haber cambiado", rol.getNombre().equals("Demo1"));
	}
	

	@Test
	public void deberiaListarRol(){
//		Arrange - Actuar
		List<Rol> roles = rolDao.getListaRol();
//		Assert - Afirmar
		Assert.assertEquals(2, roles.size());
	}
	
	@Test 
	public void deberiaListarPorNombre(){
//		Arrange - Preparar
		List<Rol> roles;
		String denominacion = "Demo1";
//		Act - Actuar
		roles = rolDao.getListaRolByNombre(denominacion);
//		Assert - Afirmar
		Assert.assertEquals(2, roles.size());
		
	}
	
	
	@Test
	public void deberiaCargarElMismoRol(){
//		Arrange - Preparar
		Long template = roles.get(0);
//		Act - Actuar
		Rol rol1 = rolDao.find(template);
//		Assert - Afirmar
		Assert.assertNotNull("rol not found!", rol1);
		Assert.assertEquals(template, rol1.getIdRol());
	}
	
	
	@Test
	public void deberiaGuardarEIniciarInstanciaDeRol(){
//		Arrange
		Rol rolAntiguo = rolDao.getListaRol().get(0);
		Rol rolNuevo = rolDao.getListaRol().get(0);
//		Act
		rolNuevo.setNombre("demostracion");
		rolDao.save(rolNuevo);
//		Assert
		Assert.assertNotNull("si el id es nulo, probablemente no guardo", rolAntiguo.getIdRol());
		Assert.assertNotNull("el rol tiene no ha sido reseteado ", rolAntiguo.getNombre());
		Assert.assertNotNull("el rol tiene no ha sido reseteado", rolAntiguo.getIdRol());
		Assert.assertSame("el objeto de rol ha sido reemplazdo", rolAntiguo, rolNuevo);
	}
	
}

package gob.servir.workflow.daoImpl;

import gob.servir.workflow.dao.DocumentoDao;
import gob.servir.workflow.model.BandejaPK;
import gob.servir.workflow.model.Documento;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class DocumentoDaoImpl implements DocumentoDao {
	@PersistenceContext
	private EntityManager em;

	public Documento find(Long id) {
		return em.find(Documento.class, id);
	}

	@Transactional
	public Documento save(Documento obj) {
		em.persist(obj);
		return obj;

	}

	@Transactional
	public Documento edit(Documento obj) {
		return em.merge(obj);
	}

	@Transactional
	public void delete(Documento obj) {
		try {
			em.remove(em.contains(obj) ? obj : em.merge(obj));
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings("unchecked")
	public List<Documento> getListaDetalleBandeja() {
		Query q = (Query) em
				.createQuery("select d from Documento d where d.estado =:estado");
		q.setParameter("estado", "A");
		try {
			return q.getResultList();
		} catch (Exception as) {
			System.out.println("LISTA DETALLE BANDEJA VACIO");
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<Documento> getListaDetalleBandeja(BandejaPK id) {
		Query q = (Query) em
				.createQuery("select d from Documento d where d.bandeja.bandejaPK.idFlujo =:idFlujo and d.bandeja.bandejaPK.idActividad =:idActividad and d.bandeja.bandejaPK.idProceso =:idProceso and d.bandeja.bandejaPK.correlativo =:correlativo and d.estado =:estado");
		q.setParameter("idFlujo", id.getIdFlujo());
		q.setParameter("idActividad", id.getIdActividad());
		q.setParameter("idProceso", id.getIdProceso());
		q.setParameter("correlativo", id.getCorrelativo());
		q.setParameter("estado", "A");
		try {
			return q.getResultList();
		} catch (Exception as) {
			System.out.println("LISTA DETALLE BANDEJA VACIO");
			return null;
		}
	}

	public void deleteListaDetalleBandeja(Long id) {

		Query q = (Query) em
				.createQuery("DELETE FROM Documento d WHERE d.idDetalle =:idDetalle");
		q.setParameter("idDetalle", id);
		try {
			long rows = (Long) q.getSingleResult();

			System.out.println("Rows deleted: " + rows);

			// Integer updateCount;
			// Query q = (Query) em
			// .createQuery("update Documento d SET d.estado =\"E\" where d.bandeja.bandejaPK.idFlujo =:idFlujo and d.bandeja.bandejaPK.idActividad =:idActividad and d.bandeja.bandejaPK.idProceso =:idProceso and d.bandeja.bandejaPK.correlativo =:correlativo and d.estado =:estado");
			// q.setParameter("idFlujo", id.getIdFlujo());
			// q.setParameter("idActividad", id.getIdActividad());
			// q.setParameter("idProceso", id.getIdProceso());
			// q.setParameter("correlativo", id.getCorrelativo());
			// q.setParameter("estado", "A");

			// return updateCount;
		} catch (Exception as) {
			System.out.println("LISTA no borrada");
			// return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<Documento> getListaValidarNroDoc(BandejaPK id, String nroDoc) {
		Query q = (Query) em
				.createQuery("select d from Documento d where d.bandeja.bandejaPK.idFlujo =:idFlujo and d.bandeja.bandejaPK.idActividad =:idActividad and d.bandeja.bandejaPK.idProceso =:idProceso and d.nroDoc =:nroDoc and d.estado =:estado");
		q.setParameter("idFlujo", id.getIdFlujo());
		q.setParameter("idActividad", id.getIdActividad());
		q.setParameter("idProceso", id.getIdProceso());
		q.setParameter("nroDoc", nroDoc);
		q.setParameter("estado", "A");
		try {
			return q.getResultList();
		} catch (Exception as) {
			System.out.println("LISTA DETALLE BANDEJA VACIO");
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<Documento> getListFlujo(Long idFlujo) {
		Query q = (Query) em
				.createQuery("select r from Documento r where r.estado =:estado and r.bandeja.bandejaPK.idFlujo =:idFlujo");
		q.setParameter("estado", "A");
		q.setParameter("idFlujo", idFlujo);
		try {
			return q.getResultList();
		} catch (Exception as) {
			as.printStackTrace();
			return null;
		}
	}

	public Long getIdMax() {
		try {
			return (Long) em.createQuery(
					"select max(r.idDetalle) from Documento r")
					.getSingleResult() + 1L;
		} catch (Exception e) {

		}
		return 1L;
	}

}

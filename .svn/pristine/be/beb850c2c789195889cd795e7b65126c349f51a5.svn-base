package gob.servir.workflow.daoImpl;

import gob.servir.workflow.dao.PermisoDao;
import gob.servir.workflow.model.ItemMenu;
import gob.servir.workflow.model.Permiso;
import gob.servir.workflow.model.Rol;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

//@Service
@Repository
public class PermisoDaoImpl implements PermisoDao {
	@PersistenceContext
	private EntityManager em;

	public Permiso find(Long id) {
		return em.find(Permiso.class, id);
	}

	@Transactional
	public Permiso save(Permiso obj) {
		if (obj.getIdPermiso() == null) {
			em.persist(obj);
			return obj;
		} else {
			return em.merge(obj);
		}
	}

	@SuppressWarnings("unchecked")
	public List<Permiso> getListaPermiso() {
		Query q = (Query) em.createQuery("select p from Permiso ");
		// q.setParameter("estado", "A");
		try {
			return q.getResultList();
		} catch (Exception as) {
			as.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<Permiso> getListaPermiso(Long idRol) {
		Query q = (Query) em
				.createQuery("select p from Permiso p where p.rol.idRol =:idRol ");
		q.setParameter("idRol", idRol);
		try {
			return q.getResultList();
		} catch (Exception as) {
			as.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<Permiso> getListaPermiso(Long idMenu, Long idRol) {
		Query q = (Query) em
				.createQuery("select p from Permiso p where p.itemMenu.menu.idMenu =:idMenu and p.rol.idRol =:idRol and p.estado =:estado");
		q.setParameter("idMenu", idMenu);
		q.setParameter("idRol", idRol);
		q.setParameter("estado", true);
		try {
			return q.getResultList();
		} catch (Exception as) {
			as.printStackTrace();
			return null;
		}
	}

	@Transactional
	public void save(Rol obj, List<ItemMenu> listItemSelec,
			List<ItemMenu> listItemMenu) {

		em.persist(obj);

		Permiso permiso = null;
		for (ItemMenu row : listItemMenu) {
			permiso = new Permiso();

			permiso.setIdPermiso(getIdMax());
			permiso.setRol(obj);
			permiso.setItemMenu(row);
//			permiso.setFechaCreacion(new Date());
//			permiso.setFechaModificacion(new Date());
//			permiso.setUsuarioRegistra(obj.getUsuarioRegistra());
//			permiso.setUsuarioModifica(obj.getUsuarioRegistra());

			for (ItemMenu itemSelec : listItemSelec) {
				if (row.getIdItemMenu().equals(itemSelec.getIdItemMenu())) {
					permiso.setEstado(true);
					break;
				} else
					permiso.setEstado(false);
			}

			em.persist(permiso);
		}
	}

	public Long getIdMax() {
		try {
			return (Long) em.createQuery(
					"select max(p.idPermiso) from Permiso p").getSingleResult() + 1L;
		} catch (Exception e) {

		}
		return 1L;
	}

}
